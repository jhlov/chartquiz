{"version":3,"sources":["components/header/Header.tsx","components/history/History.tsx","components/chart/Chart.tsx","components/quiz/Quiz.tsx","components/app/App.tsx","reportWebVitals.js","index.js"],"names":["Header","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","NavbarToggler","onClick","className","Collapse","navbar","Nav","NavItem","NavLink","href","History","history","setHistory","useEffect","localStorage","getItem","JSON","parse","avgScore","useMemo","history100","slice","length","Math","round","reduce","a","c","score","Table","size","map","e","index","date","Button","window","confirm","removeItem","Chart","isAnswerCheck","chartData","onClickAnswer","periodSelected","setPeriodSelected","rSelected","setRSelected","_onClickAnswer","answer","isSuccess","close","add_close","chartStartIndex","options","chart","height","title","text","legend","enabled","tooltip","crosshairs","xAxis","categories","add_date","labels","plotLines","color","value","dashStyle","yAxis","series","type","name","marker","lineWidth","data","Card","classNames","success","start_date","end_date","ButtonGroup","outline","active","highcharts","Highcharts","Quiz","setIsAnswerCheck","chartDataList","setChartDataList","Array","fill","answerList","setAnswerList","fetchData","axios","get","response","onScrollToBottom","scrollTo","left","top","document","body","scrollHeight","behavior","isFinish","every","filter","saveHistory","unshift","moment","format","setItem","stringify","oldValue","newArr","setTimeout","console","log","location","reload","App","path","exact","to","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","setOptions","lang","thousandsSep","credits","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cf25ea0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\n\nconst Header = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar light expand=\"md\">\n        <NavbarBrand>차트속에 답이 있다!?</NavbarBrand>\n        <NavbarToggler onClick={toggle} className=\"py-1 px-2\" />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink\n                href=\"/chartquiz/#/quiz\"\n                onClick={() => setIsOpen(false)}\n              >\n                퀴즈풀기\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                href=\"/chartquiz/#/history\"\n                onClick={() => setIsOpen(false)}\n              >\n                기록보기\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Header;\n","import HistoryData from \"interfaces/HistoryData\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Button, Table } from \"reactstrap\";\n\nconst History = () => {\n  const [history, setHistory] = useState<HistoryData[]>([]);\n\n  useEffect(() => {\n    setHistory(\n      localStorage.getItem(\"history\")\n        ? JSON.parse(localStorage.getItem(\"history\") as string)\n        : []\n    );\n  }, []);\n\n  const avgScore = useMemo(() => {\n    const history100 = history.slice(0, 30);\n    if (history100.length === 0) {\n      return 0;\n    }\n\n    return Math.round(\n      history100.reduce((a: number, c: HistoryData) => a + c.score, 0) /\n        history100.length\n    );\n  }, [history]);\n\n  const initHistory = () => {\n    if (window.confirm(\"정말 초기화하시겠습니까?\")) {\n      localStorage.removeItem(\"history\");\n      setHistory([]);\n    }\n  };\n\n  return (\n    <div className=\"my-4\">\n      <p>최근 30게임 평균 점수: {avgScore}</p>\n      <Table size=\"sm\" className=\"mb-5\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>날짜</th>\n            <th>점수</th>\n          </tr>\n        </thead>\n        <tbody>\n          {history.map((e: { date: string; score: number }, index: number) => (\n            <tr key={index}>\n              <th>{index + 1}</th>\n              <td>{e.date}</td>\n              <td>{e.score}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      {0 < history.length && <Button onClick={initHistory}>초기화</Button>}\n    </div>\n  );\n};\n\nexport default History;\n","import classNames from \"classnames\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport ChartData from \"interfaces/ChartData\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Button, ButtonGroup, Card } from \"reactstrap\";\nimport \"./Chart.scss\";\n\ninterface ChartProps {\n  isAnswerCheck: boolean;\n  chartData: ChartData;\n  onClickAnswer: Function;\n}\n\nconst Chart = ({ isAnswerCheck, chartData, onClickAnswer }: ChartProps) => {\n  const [periodSelected, setPeriodSelected] = useState<number>(0);\n  const [rSelected, setRSelected] = useState<number | null>(null);\n\n  const periodList: [number, string][] = [\n    [0, \"1년\"],\n    [6, \"6개월\"],\n    [9, \"3개월\"],\n    [11, \"1개월\"]\n  ];\n\n  useEffect(() => {\n    //console.log(chartData);\n  }, []);\n\n  const _onClickAnswer = (answer: number) => {\n    setRSelected(answer);\n    onClickAnswer(answer);\n  };\n\n  /**\n   * 정답을 맞췄는지 여부\n   */\n  const isSuccess: boolean = useMemo(() => {\n    if (isAnswerCheck) {\n      if (rSelected === 1) {\n        // up\n        return (\n          chartData.close[chartData.close.length - 1] <=\n          chartData.add_close[chartData.add_close.length - 1]\n        );\n      } else {\n        return (\n          chartData.add_close[chartData.add_close.length - 1] <=\n          chartData.close[chartData.close.length - 1]\n        );\n      }\n    }\n\n    return false;\n  }, [isAnswerCheck, chartData]);\n\n  const chartStartIndex: number = useMemo(() => {\n    return (chartData.date.length / 12) * periodSelected;\n  }, [periodSelected]);\n\n  const options: Highcharts.Options = useMemo<Highcharts.Options>(() => {\n    return {\n      chart: {\n        height: 300\n      },\n      title: {\n        text: \"\"\n      },\n      legend: {\n        enabled: false\n      },\n      tooltip: {\n        enabled: isAnswerCheck,\n        crosshairs: isAnswerCheck\n      },\n      xAxis: {\n        categories: [\n          ...chartData.date.slice(chartStartIndex),\n          ...chartData.add_date\n        ],\n        labels: {\n          enabled: isAnswerCheck\n        },\n        plotLines: [\n          {\n            color: \"red\",\n            value: chartData.date.length - chartStartIndex,\n            dashStyle: \"Dash\"\n          }\n        ]\n      },\n      yAxis: {\n        title: {\n          text: null\n        },\n        labels: {\n          enabled: isAnswerCheck\n        }\n      },\n      series: [\n        {\n          type: \"line\",\n          name: \"종가\",\n          marker: {\n            enabled: false\n          },\n          lineWidth: 1.3,\n          data: isAnswerCheck\n            ? [\n                ...chartData.close.slice(chartStartIndex),\n                ...chartData.add_close\n              ]\n            : [\n                ...chartData.close.slice(chartStartIndex),\n                null,\n                null,\n                null,\n                null,\n                null\n              ]\n        }\n      ]\n    };\n  }, [isAnswerCheck, chartData, chartStartIndex]);\n\n  return (\n    <Card className={classNames(\"mb-5 chart\", { success: isSuccess })}>\n      {isSuccess && <span className=\"success-text\">정답!!</span>}\n      {isAnswerCheck && <h2 className=\"mt-3 mb-0 ml-4\">{chartData.name}</h2>}\n      {isAnswerCheck && (\n        <h3 className=\"ml-4\">\n          {chartData.start_date} ~ {chartData.end_date}\n        </h3>\n      )}\n\n      <div className=\"p-3\">\n        <ButtonGroup className=\"period-btn\" size=\"sm\">\n          {periodList.map((e: [number, string]) => (\n            <Button\n              key={e[0]}\n              outline\n              color=\"info\"\n              onClick={() => setPeriodSelected(e[0])}\n              active={periodSelected === e[0]}\n            >\n              {e[1]}\n            </Button>\n          ))}\n        </ButtonGroup>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </div>\n      <ButtonGroup className=\"answer-btn\">\n        <Button\n          outline\n          color=\"primary\"\n          onClick={() => _onClickAnswer(1)}\n          active={rSelected === 1}\n          className={classNames({ \"pointer-events-none\": isAnswerCheck })}\n        >\n          UP\n        </Button>\n        <Button\n          outline\n          color=\"primary\"\n          onClick={() => _onClickAnswer(2)}\n          active={rSelected === 2}\n          className={classNames({ \"pointer-events-none\": isAnswerCheck })}\n        >\n          DOWN\n        </Button>\n      </ButtonGroup>\n    </Card>\n  );\n};\n\nexport default Chart;\n","import axios from \"axios\";\nimport Chart from \"components/chart/Chart\";\nimport ChartData from \"interfaces/ChartData\";\nimport HistoryData from \"interfaces/HistoryData\";\nimport moment from \"moment\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport \"./Quiz.scss\";\n\nconst Quiz = () => {\n  const QUIZ_COUNT = 5;\n\n  // 정답확인 버튼을 눌렀는지\n  const [isAnswerCheck, setIsAnswerCheck] = useState<boolean>(false);\n\n  const [chartDataList, setChartDataList] = useState<ChartData[]>([]);\n  const [answerList, setAnswerList] = useState<number[]>(\n    Array(QUIZ_COUNT).fill(0)\n  );\n\n  // mounted\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    const response: { data: ChartData } = await axios.get(\n      \"https://2m6uj3aph2.execute-api.ap-northeast-2.amazonaws.com/default/stockquiz\"\n    );\n\n    setChartDataList([...chartDataList, response.data]);\n    onScrollToBottom();\n  };\n\n  const onScrollToTop = () => {\n    window.scrollTo({\n      left: 0,\n      top: 0,\n      behavior: \"smooth\"\n    });\n  };\n\n  const onScrollToBottom = () => {\n    window.scrollTo({\n      left: 0,\n      top: document.body.scrollHeight,\n      behavior: \"smooth\"\n    });\n  };\n\n  const onClickAnswer = (index: number, answer: number) => {\n    const oldValue = answerList[index];\n\n    const newArr = [...answerList];\n    newArr[index] = answer;\n    setAnswerList(newArr);\n\n    if (oldValue === 0 && index === chartDataList.length - 1) {\n      if (chartDataList.length < QUIZ_COUNT) {\n        fetchData();\n      } else {\n        // 정답 확인 버튼 출력 되고 스크롤 아래로\n        setTimeout(() => {\n          onScrollToBottom();\n        }, 100);\n      }\n    }\n  };\n\n  const isFinish: boolean = useMemo(() => {\n    return answerList.every(e => e > 0);\n  }, [answerList]);\n\n  const onClickAnswerCheck = () => {\n    console.log(\"onClickAnswerCheck\");\n    setIsAnswerCheck(true);\n    saveHistory();\n    onScrollToTop();\n  };\n\n  const score = useMemo(() => {\n    return (\n      answerList.filter((e, index) => {\n        const chartData = chartDataList[index];\n        if (chartData) {\n          if (e === 1) {\n            // up\n            return (\n              chartData.close[chartData.close.length - 1] <=\n              chartData.add_close[chartData.add_close.length - 1]\n            );\n          } else {\n            // down\n            return (\n              chartData.add_close[chartData.add_close.length - 1] <=\n              chartData.close[chartData.close.length - 1]\n            );\n          }\n        }\n\n        return false;\n      }).length *\n      (100 / QUIZ_COUNT)\n    );\n  }, [answerList]);\n\n  const saveHistory = () => {\n    let history: HistoryData[] = localStorage.getItem(\"history\")\n      ? JSON.parse(localStorage.getItem(\"history\") as string)\n      : [];\n\n    history.unshift({\n      date: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      score: score\n    });\n\n    localStorage.setItem(\"history\", JSON.stringify(history));\n  };\n\n  return (\n    <div className=\"quiz my-4\">\n      <p>\n        1년간의 차트를 분석해서 일주일 후의 가격을 예측해보세요\n        <br />\n        (대상: KOSPI 상위종목, 기간: 최근 3년중 랜덤, 총 {QUIZ_COUNT}문제)\n      </p>\n      {chartDataList.length === 0 && <p>loading...</p>}\n      {isAnswerCheck && <p className=\"score\">SCORE: {score}</p>}\n      {chartDataList.map((e, index) => (\n        <Chart\n          key={index}\n          isAnswerCheck={isAnswerCheck}\n          chartData={e}\n          onClickAnswer={(answer: number) => onClickAnswer(index, answer)}\n        ></Chart>\n      ))}\n      {isFinish && !isAnswerCheck && (\n        <Button className=\"mb-5\" onClick={onClickAnswerCheck}>\n          정답 확인\n        </Button>\n      )}\n      {isFinish && isAnswerCheck && (\n        <Button onClick={() => window.location.reload()}>다시 하기</Button>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n","import Header from \"components/header/Header\";\nimport history from \"components/history/History\";\nimport Quiz from \"components/quiz/Quiz\";\nimport { HashRouter, Redirect, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header />\n        <HashRouter>\n          <Route path=\"/\" exact>\n            <Redirect to=\"/quiz\" />\n          </Route>\n          <Route path=\"/quiz\" component={Quiz} />\n          <Route path=\"/history\" component={history} />\n        </HashRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"components/app/App\";\nimport Highcharts from \"highcharts\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nHighcharts.setOptions({\n  lang: { thousandsSep: \",\" },\n  credits: { enabled: false }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}