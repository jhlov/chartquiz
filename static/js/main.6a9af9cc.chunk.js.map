{"version":3,"sources":["components/history/History.tsx","components/chart/Chart.tsx","components/quiz/Quiz.tsx","components/app/App.tsx","reportWebVitals.js","index.js"],"names":["History","Chart","isAnswerCheck","chartData","onClickAnswer","useState","periodSelected","setPeriodSelected","rSelected","setRSelected","useEffect","_onClickAnswer","answer","isSuccess","useMemo","close","length","add_close","chartStartIndex","date","options","chart","height","title","text","legend","enabled","tooltip","crosshairs","xAxis","categories","slice","add_date","labels","plotLines","color","value","dashStyle","yAxis","series","type","name","marker","data","Card","className","classNames","success","start_date","end_date","ButtonGroup","size","map","e","Button","outline","onClick","active","highcharts","Highcharts","Quiz","setIsAnswerCheck","chartDataList","setChartDataList","Array","fill","answerList","setAnswerList","fetchData","a","axios","get","response","onScrollToBottom","window","scrollTo","left","top","document","body","scrollHeight","behavior","isFinish","every","score","filter","index","oldValue","newArr","setTimeout","console","log","location","reload","App","path","exact","to","component","history","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","setOptions","lang","thousandsSep","credits","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6a9af9cc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst History = () => {\n  return <div>History</div>;\n};\n\nexport default History;\n","import classNames from \"classnames\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport ChartData from \"interfaces/ChartData\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Button, ButtonGroup, Card } from \"reactstrap\";\nimport \"./Chart.scss\";\n\ninterface ChartProps {\n  isAnswerCheck: boolean;\n  chartData: ChartData;\n  onClickAnswer: Function;\n}\n\nconst Chart = ({ isAnswerCheck, chartData, onClickAnswer }: ChartProps) => {\n  const [periodSelected, setPeriodSelected] = useState<number>(0);\n  const [rSelected, setRSelected] = useState<number | null>(null);\n\n  const periodList: [number, string][] = [\n    [0, \"1년\"],\n    [6, \"6개월\"],\n    [9, \"3개월\"],\n    [11, \"1개월\"]\n  ];\n\n  useEffect(() => {\n    //console.log(chartData);\n  }, []);\n\n  const _onClickAnswer = (answer: number) => {\n    setRSelected(answer);\n    onClickAnswer(answer);\n  };\n\n  /**\n   * 정답을 맞췄는지 여부\n   */\n  const isSuccess: boolean = useMemo(() => {\n    if (isAnswerCheck) {\n      if (rSelected === 1) {\n        // up\n        return (\n          chartData.close[chartData.close.length - 1] <=\n          chartData.add_close[chartData.add_close.length - 1]\n        );\n      } else {\n        return (\n          chartData.add_close[chartData.add_close.length - 1] <=\n          chartData.close[chartData.close.length - 1]\n        );\n      }\n    }\n\n    return false;\n  }, [isAnswerCheck, chartData]);\n\n  const chartStartIndex: number = useMemo(() => {\n    return (chartData.date.length / 12) * periodSelected;\n  }, [periodSelected]);\n\n  const options: Highcharts.Options = useMemo<Highcharts.Options>(() => {\n    return {\n      chart: {\n        height: 300\n      },\n      title: {\n        text: \"\"\n      },\n      legend: {\n        enabled: false\n      },\n      tooltip: {\n        enabled: isAnswerCheck,\n        crosshairs: isAnswerCheck\n      },\n      xAxis: {\n        categories: [\n          ...chartData.date.slice(chartStartIndex),\n          ...chartData.add_date\n        ],\n        labels: {\n          enabled: isAnswerCheck\n        },\n        plotLines: [\n          {\n            color: \"red\",\n            value: chartData.date.length - chartStartIndex,\n            dashStyle: \"Dash\"\n          }\n        ]\n      },\n      yAxis: {\n        title: {\n          text: null\n        },\n        labels: {\n          enabled: isAnswerCheck\n        }\n      },\n      series: [\n        {\n          type: \"line\",\n          name: \"종가\",\n          marker: {\n            enabled: false\n          },\n          data: isAnswerCheck\n            ? [\n                ...chartData.close.slice(chartStartIndex),\n                ...chartData.add_close\n              ]\n            : [\n                ...chartData.close.slice(chartStartIndex),\n                null,\n                null,\n                null,\n                null,\n                null\n              ]\n        }\n      ]\n    };\n  }, [isAnswerCheck, chartData, chartStartIndex]);\n\n  return (\n    <Card className={classNames(\"mb-5 chart\", { success: isSuccess })}>\n      {isSuccess && <span className=\"success-text\">정답!!</span>}\n      {isAnswerCheck && <h2 className=\"mt-3 mb-0 ml-4\">{chartData.name}</h2>}\n      {isAnswerCheck && (\n        <h3 className=\"ml-4\">\n          {chartData.start_date} ~ {chartData.end_date}\n        </h3>\n      )}\n\n      <div className=\"p-3\">\n        <ButtonGroup className=\"period-btn\" size=\"sm\">\n          {periodList.map((e: [number, string]) => (\n            <Button\n              outline\n              color=\"info\"\n              onClick={() => setPeriodSelected(e[0])}\n              active={periodSelected === e[0]}\n            >\n              {e[1]}\n            </Button>\n          ))}\n        </ButtonGroup>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </div>\n      <ButtonGroup className=\"answer-btn\">\n        <Button\n          outline\n          color=\"primary\"\n          onClick={() => _onClickAnswer(1)}\n          active={rSelected === 1}\n          className={classNames({ \"pointer-events-none\": isAnswerCheck })}\n        >\n          UP\n        </Button>\n        <Button\n          outline\n          color=\"primary\"\n          onClick={() => _onClickAnswer(2)}\n          active={rSelected === 2}\n          className={classNames({ \"pointer-events-none\": isAnswerCheck })}\n        >\n          DOWN\n        </Button>\n      </ButtonGroup>\n    </Card>\n  );\n};\n\nexport default Chart;\n","import axios from \"axios\";\nimport Chart from \"components/chart/Chart\";\nimport ChartData from \"interfaces/ChartData\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport \"./Quiz.scss\";\n\nconst Quiz = () => {\n  const QUIZ_COUNT = 5;\n\n  // 정답확인 버튼을 눌렀는지\n  const [isAnswerCheck, setIsAnswerCheck] = useState<boolean>(false);\n\n  const [chartDataList, setChartDataList] = useState<ChartData[]>([]);\n  const [answerList, setAnswerList] = useState<number[]>(\n    Array(QUIZ_COUNT).fill(0)\n  );\n\n  // mounted\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    const response: { data: ChartData } = await axios.get(\n      \"https://2m6uj3aph2.execute-api.ap-northeast-2.amazonaws.com/default/stockquiz\"\n    );\n\n    setChartDataList([...chartDataList, response.data]);\n    onScrollToBottom();\n  };\n\n  const onScrollToTop = () => {\n    window.scrollTo({\n      left: 0,\n      top: 0,\n      behavior: \"smooth\"\n    });\n  };\n\n  const onScrollToBottom = () => {\n    window.scrollTo({\n      left: 0,\n      top: document.body.scrollHeight,\n      behavior: \"smooth\"\n    });\n  };\n\n  const onClickAnswer = (index: number, answer: number) => {\n    const oldValue = answerList[index];\n\n    const newArr = [...answerList];\n    newArr[index] = answer;\n    setAnswerList(newArr);\n\n    if (oldValue === 0 && index === chartDataList.length - 1) {\n      if (chartDataList.length < QUIZ_COUNT) {\n        fetchData();\n      } else {\n        // 정답 확인 버튼 출력 되고 스크롤 아래로\n        setTimeout(() => {\n          onScrollToBottom();\n        }, 100);\n      }\n    }\n  };\n\n  const isFinish: boolean = useMemo(() => {\n    return answerList.every(e => e > 0);\n  }, [answerList]);\n\n  const onClickAnswerCheck = () => {\n    console.log(\"onClickAnswerCheck\");\n    setIsAnswerCheck(true);\n    onScrollToTop();\n  };\n\n  const score = useMemo(() => {\n    return (\n      answerList.filter((e, index) => {\n        const chartData = chartDataList[index];\n        if (chartData) {\n          if (e === 1) {\n            // up\n            return (\n              chartData.close[chartData.close.length - 1] <=\n              chartData.add_close[chartData.add_close.length - 1]\n            );\n          } else {\n            // down\n            return (\n              chartData.add_close[chartData.add_close.length - 1] <=\n              chartData.close[chartData.close.length - 1]\n            );\n          }\n        }\n\n        return false;\n      }).length *\n      (100 / QUIZ_COUNT)\n    );\n  }, [answerList]);\n\n  return (\n    <div className=\"quiz\">\n      <h1 className=\"mt-5 mb-4\">차트속에 답이 있다!?</h1>\n      {isAnswerCheck && <p className=\"score\">SCORE: {score}</p>}\n      {chartDataList.map((e, index) => (\n        <Chart\n          key={index}\n          isAnswerCheck={isAnswerCheck}\n          chartData={e}\n          onClickAnswer={(answer: number) => onClickAnswer(index, answer)}\n        ></Chart>\n      ))}\n      {isFinish && !isAnswerCheck && (\n        <Button className=\"mb-5\" onClick={onClickAnswerCheck}>\n          정답 확인\n        </Button>\n      )}\n      {isFinish && isAnswerCheck && (\n        <Button className=\"mb-5\" onClick={() => window.location.reload()}>\n          다시 하기\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n","import history from \"components/history/History\";\nimport Quiz from \"components/quiz/Quiz\";\nimport { HashRouter, Redirect, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <HashRouter>\n          <Route path=\"/\" exact>\n            <Redirect to=\"/quiz\" />\n          </Route>\n          <Route path=\"/quiz\" component={Quiz} />\n          <Route path=\"/history\" component={history} />\n        </HashRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"components/app/App\";\nimport Highcharts from \"highcharts\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nHighcharts.setOptions({\n  lang: { thousandsSep: \",\" },\n  credits: { enabled: false }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}